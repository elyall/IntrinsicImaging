function iOS

% Initialize Saving
gd.Internal.save.path = cd;
gd.Internal.save.base = '0000_c2';
gd.Internal.save.index = '1';
gd.Internal.save.filename = fullfile(gd.Internal.save.path, strcat(gd.Internal.save.base, gd.Internal.save.index));

% Initialize Timing
gd.Experiment.timing.baselineDur = .5;  %seconds
gd.Experiment.timing.stimDur = 4;       %seconds
gd.Experiment.timing.ITI = 2;           %seconds
gd.Experiment.timing.numTrials = 35;

% Initialize Stimulus
gd.Experiment.stim.frequency = 20;      %hz
gd.Experiment.stim.riseTime = 0.01;     %seconds
gd.Experiment.stim.fallTime = 0.01;     %seconds
gd.Experiment.stim.voltage = 5;         %volts

% Initialize Imaging
gd.Internal.imaging.port = 'COM5';
gd.Internal.imaging.initFile = 'C:\Users\User\Documents\MATLAB\iOS\CamFiles\T_1m60_12-bits_2_tap_ext_trig.ccf';
gd.Experiment.imaging.frameRate = 59;   %hz
% gd.Experiment.imaging.gain = 0;
% gd.Experiment.imaging.exposure = 0;

% Default Settings
gd.Internal.daq.samplingFrequency = 30000;
gd.Internal.daq.piezos = table({true;true},{'Dev3';'Dev3'},{'0';'1'},'VariableNames',{'Active','Device','Port'});
gd.Internal.daq.camera = table({'Dev1'},{'port0/line2'},{'D'},'VariableNames',{'Device','Port','Type'});

% Display parameters
Display.units = 'pixels';
Display.position = [100, 100, 1000, 600];


%% Generate GUI

% Create figure
gd.gui.fig = figure(...
    'NumberTitle',          'off',...
    'Name',                 'Intrinsic Optical Signal Imaging',...
    'Units',                Display.units,...
    'Position',             Display.position,...
    'ToolBar',              'none',...
    'MenuBar',              'none');

% Create file selection
% panel
gd.gui.file.panel = uipanel(...
    'Title',                'File Information',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [0, .8, 1, .2]);
% select directory
gd.gui.file.dir = uicontrol(...
    'Style',                'pushbutton',...
    'String',               'Dir',...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [0,0,.2,1],...
    'Callback',             @(hObject,eventdata)ChooseDir(hObject, eventdata, guidata(hObject)));
% basename input
gd.gui.file.base = uicontrol(...
    'Style',                'edit',...
    'String',               gd.Internal.save.base,...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [.25,.3,.5,.5],...
    'Callback',             @(hObject,eventdata)CreateFilename(guidata(hObject)));
gd.gui.file.baseText = uicontrol(...
    'Style',                'text',...
    'String',               'Basename',...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [.25,.8,.5,.2]);
% file index
gd.gui.file.index = uicontrol(...
    'Style',                'edit',...
    'String',               gd.Internal.save.index,...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [.8,.3,.15,.5],...
    'Callback',             @(hObject,eventdata)CreateFilename(guidata(hObject)));
gd.gui.file.indexText = uicontrol(...
    'Style',                'text',...
    'String',               'File Index',...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [.8,.8,.15,.2]);
% display filename
gd.gui.file.filename = uicontrol(...
    'Style',                'text',...
    'String',               '',...
    'Parent',               gd.gui.file.panel,...
    'Units',                'normalized',...
    'Position',             [.2,.05,.8,.2]);

% Create axes
% panel
gd.gui.axes.panel = uipanel(...
    'Title',                'Images',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [0, .4, 1, .4]);
% first axes
gd.gui.axes.first = axes(...
    'Parent',               gd.gui.axes.panel,...
    'Units',                'normalized',...
    'Position',             [0,0,.33,1]);
axis off
% second axes
gd.gui.axes.second = axes(...
    'Parent',               gd.gui.axes.panel,...
    'Units',                'normalized',...
    'Position',             [.33,0,.34,1]);
axis off
% third axes
gd.gui.axes.third = axes(...
    'Parent',               gd.gui.axes.panel,...
    'Units',                'normalized',...
    'Position',             [.66,0,.33,1]);
axis off

% Create image control
gd.gui.control.panel = uipanel(...
    'Title',                'Prep',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [0,0,.15,.4]);
% preview
gd.gui.control.preview = uicontrol(...
    'Style',                'togglebutton',...
    'String',               'Preview',...
    'Parent',               gd.gui.control.panel,...
    'Units',                'normalized',...
    'Position',             [0,.8,1,.2],...
    'Callback',             @(hObject,eventdata)PreviewImage(hObject, eventdata, guidata(hObject)));
% capture image
gd.gui.control.capture = uicontrol(...
    'Style',                'pushbutton',...
    'String',               'Capture Image',...
    'Parent',               gd.gui.control.panel,...
    'Units',                'normalized',...
    'Position',             [0,.5,1,.2],...
    'Callback',             @(hObject,eventdata)CaptureImage(hObject, eventdata, guidata(hObject)));
% live histogram
gd.gui.control.histogram = uicontrol(...
    'Style',                'checkbox',...
    'String',               'Histogram',...
    'Parent',               gd.gui.control.panel,...
    'Units',                'normalized',...
    'Position',             [0,.4,.7,.1]);
% select ROI
gd.gui.control.selectROI = uicontrol(...
    'Style',                'pushbutton',...
    'String',               'Select ROI',...
    'Parent',               gd.gui.control.panel,...
    'Units',                'normalized',...
    'Position',             [0,.1,1,.2],...
    'Enable',              'off',...
    'Callback',             @(hObject,eventdata)SelectROI(hObject, eventdata, guidata(hObject)));
% use ROI
gd.gui.control.ROItoggle = uicontrol(...
    'Style',                'checkbox',...
    'String',               'Use ROI?',...
    'Parent',               gd.gui.control.panel,...
    'Units',                'normalized',...
    'Enable',               'off',...
    'Position',             [0,0,1,.1]);

% Create timing control
gd.gui.timing.panel = uipanel(...
    'Title',                'Timing',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [.15,0,.15,.4]);
% Number of Trials
gd.gui.timing.numTrials = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.timing.panel,...
    'String',               gd.Experiment.timing.numTrials,...
    'Units',                'normalized',...
    'Position',             [.7,.8,.3,.15],...
    'UserData',             {'timing','numTrials', 1, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.timing.numTrialsText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.timing.panel,...
    'String',               'Num Trials',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.8,.65,.1]);
% Baseline duration
gd.gui.timing.baselineDur = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.timing.panel,...
    'String',               gd.Experiment.timing.baselineDur,...
    'Units',                'normalized',...
    'Position',             [.7,.6,.3,.15],...
    'UserData',             {'timing','baselineDur', 0, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.timing.baselineDurText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.timing.panel,...
    'String',               'Baseline (s)',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.6,.65,.1]);
% Stimulus duration
gd.gui.timing.stimDur = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.timing.panel,...
    'String',               gd.Experiment.timing.stimDur,...
    'Units',                'normalized',...
    'Position',             [.7,.4,.3,.15],...
    'UserData',             {'timing','stimDur', 0.001, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.timing.stimDurText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.timing.panel,...
    'String',               'Stimulus (s)',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.4,.65,.1]);
% ITI
gd.gui.timing.ITI = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.timing.panel,...
    'String',               gd.Experiment.timing.ITI,...
    'Units',                'normalized',...
    'Position',             [.7,.2,.3,.15],...
    'UserData',             {'timing','ITI', 0, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.timing.ITIText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.timing.panel,...
    'String',               'ITI (s)',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.2,.65,.1]);

% Create stimulus control
gd.gui.stim.panel = uipanel(...
    'Title',                'Stimulus',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [.3,0,.3,.4]);
% Piezo 2 toggle
gd.gui.stim.piezos = uitable(...
    'Parent',               gd.gui.stim.panel,...
    'Units',                'normalized',...
    'Position',             [0,.6,1,.4],...
    'ColumnName',           {'Active?','Device','Port','Type(AorD)'},...
    'ColumnEditable',       [true, false, false,false],...
    'ColumnFormat',         {'logical','char','char','char'},...
    'ColumnWidth',          {50,50,75,50},...
    'Data',                 table2cell(gd.Internal.daq.piezos));
% stimulus frequency
gd.gui.stim.frequency = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.stim.panel,...
    'String',               gd.Experiment.stim.frequency,...
    'Units',                'normalized',...
    'Position',             [.35,.4,.15,.15],...
    'UserData',             {'stim','frequency', 0, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.stim.frequencyText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.stim.panel,...
    'String',               'Frequency',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.4,.35,.1]);
% peak voltage
gd.gui.stim.voltage = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.stim.panel,...
    'String',               gd.Experiment.stim.voltage,...
    'Units',                'normalized',...
    'Position',             [.85,.4,.15,.15],...
    'UserData',             {'stim','voltage', 0, 5},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.stim.voltageText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.stim.panel,...
    'String',               'Peak Voltage',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [.5,.4,.35,.1]);
% rise time
gd.gui.stim.riseTime = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.stim.panel,...
    'String',               gd.Experiment.stim.riseTime,...
    'Units',                'normalized',...
    'Position',             [.35,.2,.15,.15],...
    'UserData',             {'stim','riseTime', 0.01, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.stim.riseTimeText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.stim.panel,...
    'String',               'Rise Time',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [0,.2,.35,.1]);
% fall time
gd.gui.stim.fallTime = uicontrol(...
    'Style',                'edit',...
    'Parent',               gd.gui.stim.panel,...
    'String',               gd.Experiment.stim.fallTime,...
    'Units',                'normalized',...
    'Position',             [.85,.2,.15,.15],...
    'UserData',             {'stim','fallTime', 0.01, []},...
    'Callback',             @(hObject,eventdata)ChangeStim(hObject, eventdata, guidata(hObject)));
gd.gui.stim.fallTimeText = uicontrol(...
    'Style',                'text',...
    'Parent',               gd.gui.stim.panel,...
    'String',               'Fall Time',...
    'HorizontalAlignment',  'right',...
    'Units',                'normalized',...
    'Position',             [.5,.2,.35,.1]);
% View triggers
gd.gui.stim.view = uicontrol(...
    'Style',                'pushbutton',...
    'String',               'View',...
    'Parent',               gd.gui.stim.panel,...
    'Units',                'normalized',...
    'Position',             [0,0,.5,.2],...
    'Callback',             @(hObject,eventdata)ViewTriggers(hObject, eventdata, guidata(hObject)));
% Test stimuli
gd.gui.stim.test = uicontrol(...
    'Style',                'pushbutton',...
    'String',               'Test',...
    'Parent',               gd.gui.stim.panel,...
    'Units',                'normalized',...
    'Position',             [.5,0,.5,.2],...
    'Callback',             @(hObject,eventdata)TestTriggers(hObject, eventdata, guidata(hObject)));

% Create experiment control
gd.gui.experiment.panel = uipanel(...
    'Title',                'Experiment',...
    'Parent',               gd.gui.fig,...
    'Units',                'Normalized',...
    'Position',             [.6,0,.4,.4]);
% Run experiment
gd.gui.experiment.run = uicontrol(...
    'Style',                'togglebutton',...
    'String',               'Run',...
    'Parent',               gd.gui.experiment.panel,...
    'Units',                'normalized',...
    'Position',             [0,.8,1,.2],...
    'BackgroundColor',      'green',...
    'Callback',             @(hObject,eventdata)RunExperiment(hObject, eventdata, guidata(hObject)));
% Restart experiment
gd.gui.experiment.restart = uicontrol(...
    'Style',                'togglebutton',...
    'String',               'Restart',...
    'Parent',               gd.gui.experiment.panel,...
    'Units',                'normalized',...
    'Position',             [0,.5,1,.2],...
    'Enable',               'off');
% Abort experiment
gd.gui.experiment.abort = uicontrol(...
    'Style',                'togglebutton',...
    'String',               'Abort',...
    'Parent',               gd.gui.experiment.panel,...
    'Units',                'normalized',...
    'Position',             [0,.2,1,.2],...
    'Enable',               'off',...
    'UserData',             'save');
CreateFilename(gd);
try
    initCamera(gd);
catch
    error('Camera not found -> try restarting MATLAB');
end
end


%% File Saving
function ChooseDir(hObject, eventdata, gd)
temp = uigetdir(gd.Internal.save.path, 'Choose directory to save to');
if ischar(temp)
    gd.Internal.save.path = temp;
    guidata(hObject, gd);
end
CreateFilename(gd);
end

function CreateFilename(gd)
gd.Internal.save.filename = fullfile(gd.Internal.save.path, strcat(gd.gui.file.base.String, '_', gd.gui.file.index.String, '.mat'));
gd.gui.file.filename.String = gd.Internal.save.filename;
guidata(gd.gui.fig, gd);
if exist(gd.Internal.save.filename, 'file')
    gd.gui.file.filename.BackgroundColor = [1,0,0];
else
    gd.gui.file.filename.BackgroundColor = [.94,.94,.94];
end
end

%% Prep
function initCamera(gd)

% Initialize camera
gd.Internal.imaging.vid = videoinput('dalsa', 1, gd.Internal.imaging.initFile);
gd.Internal.imaging.src = getselectedsource(vid);
gd.Internal.imaging.vid.FramesPerTrigger = 1;

imaqmem(2000000000); %set aside 2GB of memory for image frames (this should be changed depending on num of frames to be acquired

gd.Internal.imaging.vid.TriggerRepeat = Inf; %set number of triggers to expect. set to Inf so any number of frames can be captured
triggerconfig(vid, 'hardware', 'risingEdge-ttl', 'automatic'); %set camera to be triggered on rising edge of ttl pulse

cam_serial_cmmd(cam_com_port,'sem 3');
cam_serial_cmmd(cam_com_port,'sec 0');

mssg = cam_serial_cmmd(cam_com_port,'gcp');

sem_check = 0;
sec_check = 0;
for k = 1:numel(mssg)
    if regexp(mssg{k},'Exposure Control.*disabled') %'.' = any single character, '*' = 0 or more times consecutively)
        sec_check = 1;
        disp('Exposure Control Set to ''disabled''')
    elseif regexp(mssg{k},'Exposure Mode.*3')
        sem_check = 1;
        disp('Exposure Mode set to ''3''')
    end
end
if sem_check == 0;
    error('iOS:camExpMode','Could not change camera to proper external tirgger mode (mode 3)')
elseif sec_check == 0;
    error('iOS:camExpControl','Could not set camera exposure control to disabled')
end

guidata(gd.gui.fig, gd);
end

function PreviewImage(hObject, eventdata, gd)
if hObject.Value
    gd.gui.experiment.panel.Visible='off';
    set([gd.gui.control.capture,gd.gui.control.selectROI,gd.gui.control.histogram],'Enable','off');
    set(hObject,'String','Stop Preview','BackgroundColor',[0,0,0],'ForegroundColor',[1,1,1]);
    temp_img = zeros(gd.Internal.imaging.vid.Videoresolution);  %initialize image
    hImage = image(temp_img,'Parent',gd.gui.axes.first);        %initialize handle
    if gd.gui.control.histogram.Value                           %check if need to show live histogram
        setappdata(hImage,'UpdatePreviewWindowFcn',@iOS_update_livehistogram_display);
    end
    preview(handles.vid,hImage)                                 %start preview
else
    stoppreview(handles.vid)                                    %stop preview
    gd.gui.experiment.panel.Visible='on';
    set([gd.gui.control.capture,gd.gui.control.selectROI,gd.gui.control.histogram],'Enable','on');
    set(hObject,'String','Preview','BackgroundColor',[.94,.94,.94],'ForegroundColor',[0,0,0]);
end
end

function iOS_update_livehistogram_display(obj,event,hImage)
set(hImage,'CData',event.Data);
counts = imhist(event.Data);
imhist(event.Data)
% ylim([0 255^2])
perc_255 = (counts(end)/sum(counts))*100;
perc_254 = (counts(end-1)/sum(counts))*100;
img_mean = mean2(event.Data);
ymax = max(ylim)-max(ylim)*0.1;
hold on
text(25,ymax,['perc @ 255: ' num2str(perc_255)])
text(25,ymax-ymax*0.1,['perc @ 254: ' num2str(perc_254)])
text(25,ymax-ymax*0.2,['mean: ' num2str(img_mean)])
hold off
drawnow
end

function CaptureImage(hObject, eventdata, gd)
img = captureSingleFrame(gd);
gd.Experiment.GreenImage = img;
guidata(hObject,gd);
imwrite(vid_data,strcat(gd.Internal.save.filename,'_','green_image.tif')); %save to file (overwrites any previous image)
end

function img = captureSingleFrame(gd)
temp_img = zeros(get(handles.vid,'Videoresolution'));   %initialize image
hImage = image(temp_img,'Parent',gd.gui.axes.first);    %initialize handle
flushdata(gd.Internal.imaging.vid)                      %remove any previous data
triggerconfig(gd.Internal.imaging.vid, 'manual');       %change trigger
preview(gd.Internal.imaging.vid,hImage);                %preview image
start(gd.Internal.imaging.vid);                         %start recording
pause(0.100)                                            %ensures recording started
trigger(gd.Internal.imaging.vid);                       %manually trigger frame
pause(0.100) %for some reason no data is collected if there is no pause. this is what makes it work!!!
stoppreview(gd.Internal.imaging.vid);                   %stop preview
stop(gd.Internal.imaging.vid);                          %stop recording
triggerconfig(gd.Internal.imaging.vid, 'hardware', 'risingEdge-ttl', 'automatic'); %change trigger back to external
vid_data = getdata(gd.Internal.imaging.vid);            %collect recorded frame
img = uint8(single(vid_data)/(2^12-1)*(2^8-1));    %convert frame to uint8
end

function SelectROI(hObject, eventdata, gd)
if ~gd.Internal.isRunning
    img = captureSingleFrame(gd);
else
    img = gd.Experiment.GreenImage;
end
h = figure;
BW = roipoly(single(img)./(2^12-1));
close(h)
hObject.UserData = BW;
gd.gui.control.useROI.Enable = 'on';
end

%% Stimuli
function ChangeStim(hObject, eventdata, gd)
newValue = str2num(hObject.String);
if isempty(newValue)                                                    % not a number
    hObject.String = gd.Experiment.(hObject.UserData{1}).(hObject.UserData{2});
elseif ~isempty(hObject.UserData{3}) && newValue < hObject.UserData{3}  % lower bound
    hObject.String = hObject.UserData{3};
    gd.Experiment.(hObject.UserData{1}).(hObject.UserData{2}) = hObject.UserData{3};
    guidata(hObject,gd);
elseif ~isempty(hObject.UserData{4}) && newValue > hObject.UserData{4}  % upper bound
    hObject.String = hObject.UserData{4};
    gd.Experiment.(hObject.UserData{1}).(hObject.UserData{2}) = hObject.UserData{4};
    guidata(hObject,gd);
else                                                                    % valid input
    gd.Experiment.(hObject.UserData{1}).(hObject.UserData{2}) = newValue;
    guidata(hObject, gd);
end
end

function ViewTriggers(hObject, eventdata, gd)
[Triggers,Stimulus] = generateTriggers(gd);
x = 0:1/gd.Internal.daq.samplingFrequency:(size(Triggers,1)-1)/gd.Internal.daq.samplingFrequency;
figure('NumberTitle','off','Name','Single Trial Triggers'); hold on;
for index = 1:2
    plot(x,Triggers(:,index));
end
plot(x,Stimulus*max(Triggers(:)));
axis tight
ylabel('Voltage');
xlabel('Time (s)');
legend('Piezo','Camera','Stimulus Period');
end

function TestTriggers(hObject, eventdata, gd)
if hObject.Value
    DAQ = daq.createSession('ni');
    DAQ.Rate = gd.Internal.daq.samplingFrequency;
    for index = find(ActivePiezos)
        [~,id] = DAQ.addAnalogOutputChannel(gd.Internal.daq.piezos.Device(index),gd.Internal.daq.piezos.Port(index),'Voltage');
        DAQ.Channels(id).Name = sprintf('O_Piezo%d',index);
    end
    
    Triggers = generateTriggers(gd);
    
    while hObject.Value
        DAQ.queueOutputData(Triggers(:,1:end-1));
        DAQ.startForeground;
        if ~hObject.Value
            break
        end
    end
    clear DAQ;
end
end

function [Triggers,Stimulus] = generateTriggers(gd)
t = gd.Experiment.timing;
s = gd.Experiment.stim;
Fs = gd.Internal.daq.samplingFrequency;

% Initialize Triggers
trialDuration = t.baselineDur + t.stimDur + t.ITI;
numScansPerTrial = trialDuration*gd.Internal.daq.samplingFrequency;
Triggers = zeros(numScansPerTrial,2);
Stimulus = zeros(numScansPerTrial,1);
startTrig = round(t.baselineDur*Fs)+1;

% Build piezo triggers
piezoTrigs = generatePiezoTrig(s.riseTime, s.fallTime, s.frequency, ceil(t.stimDur*Fs), Fs)*s.voltage;
numScansPerStim = numel(piezoTrigs);
endTrig = startTrig+numScansPerStim-1;
Triggers(startTrig:endTrig,1) = piezoTrigs;
Stimulus(startTrig:endTrig) = 1;

% Add camera triggers
Triggers(1:ceil(Fs/gd.Experiment.imaging.frameRate):endTrig,end) = 1;
end

function trig = generatePiezoTrig(riseTime, fallTime, freq, numScans, Fs)

% Create rising wave
rise_period = 2*riseTime;
rise_f = 1/rise_period;
rise_t = (0:1/Fs:riseTime)';
rise_wave = (-0.5*cos(2*pi*rise_f*rise_t)+0.5);

% Create falling wave
fall_period = 2*fallTime;
fall_f = 1/fall_period;
fall_t = (0:1/Fs:fallTime)';
fall_wave = (0.5*cos(2*pi*fall_f*fall_t)+0.5);

% Determine if duration of wave is longer than single period for desired frequency
stim_lag = ((1/freq)-(riseTime + fallTime));
if stim_lag >= 0 %wave is not longer than single period
    stim_lag = ceil(stim_lag*Fs); %num of samples between wails
elseif stim_lag < 0 %wave is longer than single period
    warning('RiseTime and FallTime parameters combine to be longer than single period for desired frequency. Frequency will set to the maximum frequency allowed with the given RiseTime and FallTime parameters.');
    stim_lag = 0;
end

% Build single wail
single_stim = [rise_wave;fall_wave;zeros(stim_lag,1)]; %single period
numScansPerWail = numel(single_stim);

% Build for entire duraiton
numWails = floor(numScans/numScansPerWail);
trig = repmat(single_stim,numWails,1);

end

%% Experiment
function RunExperiment(hObject, eventdata, gd)
if hObject.Value
    gd.Internal.isRunning = true;
    guidata(hObject,gd);
    
    %% Determine filename to save to
    if exist([gd.Internal.save.filename,'.mat'], 'file')
        answer = questdlg(sprintf('File already exists! Continue?\n%s', gd.Internal.save.filename), 'Overwrite file?', 'Yes', 'No', 'No');
        if strcmp(answer, 'No')
            hObject.Value = false;
            return
        end
    end
    gd.Experiment.filename = gd.Internal.save.filename;
    
    %% Initialize DAQ
    
    % Determine active piezos
    ActivePiezos = [gd.gui.stim.piezos.Data{:,1}];
    if ~any(ActivePiezos)
        error('No piezos active -> at least one piezo needs to be active');
    end
    numConditions = nnz(ActivePiezos);
    
    % Initialize DAQ
    DAQ = daq.createSession('ni');
    DAQ.Rate = gd.Internal.daq.samplingFrequency;
    % Piezos
    for index = find(ActivePiezos)
        [~,id] = DAQ.addAnalogOutputChannel(gd.Internal.daq.piezos.Device(index),gd.Internal.daq.piezos.Port(index),'Voltage');
        DAQ.Channels(id).Name = sprintf('O_Piezo%d',index);
    end
    % Camera
    [~,id]=DAQ.addDigitalChannel('Dev3','port0/line0','OutputOnly'); % camera trigger
    DAQ.Channels(id).Name = 'O_CameraTrigger';
    
    %% Create Triggers
    [Triggers,Stimulus] = generateTriggers(gd);
    numFrames = sum(Triggers(:,2)==1);
    numStimFrames = sum(Triggers(Stimulus==1,2)==1);
    numBaselineFrames = numFrames-numStimFrames;
    
    %% Run Experiment
    gd.Experiment.timing.init = datestr(now);               %Record date & time information
    
    % Update gui
    hObject.String = 'Stop & Save';
    
    % Initialize display
    temp_img = zeros(gd.Internal.imaging.vid.Videoresolution);
    hImage = image(temp_img,'Parent',gd.gui.axes.second);
    % axes(handles.resp_ratio_axes)
    
    currentTrial = 1;
    gd.Experiment.Trials = cell(1,numConditions);
    gd.Experiment.Mean = cell(1,numConditions);
    while currentTrial < gd.gui.timing.numTrials && hObject.Value && ~gd.gui.experiment.abort.Value
        for cindex = 1:numConditions
            
            % Initialize camera
            flushdata(gd.Internal.imaging.vid);
            % preview(gd.Internal.imaging.vid,hImage);
            start(gd.Internal.imaging.vid);
            
            % Run trial
            currentTriggers = [repmat(Triggers(:,1),1,numel(ActivePiezos)),Triggers(:,2)];
            currentTriggers(:,setdiff(1:numConditions,cindex)) = 0;
            DAQ.queueOutputData(currentTriggers);
            DAQ.startForeground;
            
            % Stop camera & gather frames
            % stoppreview(gd.Internal.imaging.vid);
            stop(gd.Internal.imaging.vid);
            vid_data = getdata(gd.Internal.imaging.vid,gd.Internal.imaging.vid.FramesAvailable);
            
            % Analyze frames
            baseline = mean(vid_data(:,:,:,1:numBaselineFrames),4);
            stim = mean(vid_data(:,:,:,numBaselineFrames+1:end),4);
            gd.Experiment.Trials{cindex} = cat(3,gd.Experiment.Data{cindex},stim-baseline);
            gd.Experiment.Mean{cindex} = mean(gd.Experiment.Data{cindex},3);
            
            % Display updated images
            axes(gd.gui.axes.second);
            imagesc(gd.Experiment.Mean{cindex});
            if gd.gui.control.useROI.Value
                axes(gd.gui.axes.third);
                imagesc(gd.Experiment.Mean{cindex}(gd.gui.control.selectROI.UserData));
            end
            
            % Check if need to restart
            if gd.gui.experiment.restart.Value
                gd.Experiment.Trials = cell(1,numConditions);
                currentTrial = 1;
                gd.gui.experiment.restart.Value = false;
            end
            
            currentTrial = currentTrial + 1;
        end %condition
    end %trials
    gd.Experiment.timing.numTrials = currentTrial;
    
    % Save results
    if ~gd.gui.experiment.abort.Value
        Experiment = gd.Experiment;
        save([gd.Experiment.filename,'.mat'],'Experiment');
        for cindex = 1:numConditions
            imwrite([gd.Experiment.filename,'_cond',num2str(cindex),'.tif'], gd.Experiment.Mean{cindex});
        end
    else % user aborted
        gd.gui.experiment.abort.Value = false;
    end
    
    % Update GUI
    gd.Internal.isRunning = false;
    guidata(hObject,gd);
    hObject.String = 'Run';
else
    hObject.String = 'Stopping...';
end
end
